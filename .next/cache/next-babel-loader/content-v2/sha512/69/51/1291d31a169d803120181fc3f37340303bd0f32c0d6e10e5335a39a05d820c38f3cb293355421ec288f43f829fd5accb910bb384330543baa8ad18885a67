{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n// Define the initial state using that type\nvar initialState = {\n  bgColor: 'gray-100'\n};\nexport var pathSlice = createSlice({\n  name: 'path',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState: initialState,\n  reducers: {\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    changeBg: function changeBg(state, action) {\n      var _action$payload;\n\n      state.bgColor = (_action$payload = action.payload) !== null && _action$payload !== void 0 ? _action$payload : initialState.bgColor;\n    }\n  }\n});\nvar changeBg = pathSlice.actions.changeBg; // Other code such as selectors can use the imported `RootState` type\n\nexport { changeBg };\nexport var selectBgColor = function selectBgColor(state) {\n  return state.path.bgColor;\n};\nexport default pathSlice.reducer;","map":{"version":3,"sources":["E:/Cyber/yudbet/maze meshane/react/lib/slices/pathSlice.ts"],"names":["createSlice","initialState","bgColor","pathSlice","name","reducers","changeBg","state","action","payload","actions","selectBgColor","path","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAQA;AACA,IAAMC,YAAuB,GAAG;AAC9BC,EAAAA,OAAO,EAAE;AADqB,CAAhC;AAIA,OAAO,IAAMC,SAAS,GAAGH,WAAW,CAAC;AACnCI,EAAAA,IAAI,EAAE,MAD6B;AAEnC;AACAH,EAAAA,YAAY,EAAZA,YAHmC;AAInCI,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,QAAQ,EAAE,kBAACC,KAAD,EAAQC,MAAR,EAA0C;AAAA;;AAClDD,MAAAA,KAAK,CAACL,OAAN,sBAAgBM,MAAM,CAACC,OAAvB,6DAAkCR,YAAY,CAACC,OAA/C;AACD;AAJO;AAJyB,CAAD,CAA7B;IAYQI,Q,GAAaH,SAAS,CAACO,O,CAAvBJ,Q,EAEf;;;AACA,OAAO,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAACJ,KAAD;AAAA,SAAsBA,KAAK,CAACK,IAAN,CAAWV,OAAjC;AAAA,CAAtB;AAEP,eAAeC,SAAS,CAACU,OAAzB","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport type { RootState } from '../store'\r\n\r\n// Define a type for the slice state\r\ninterface PathState {\r\n  bgColor: string\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: PathState = {\r\n  bgColor: 'gray-100',\r\n}\r\n\r\nexport const pathSlice = createSlice({\r\n  name: 'path',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    changeBg: (state, action: PayloadAction<string>) => {\r\n      state.bgColor = action.payload ?? initialState.bgColor\r\n    },\r\n  },\r\n})\r\n\r\nexport const { changeBg } = pathSlice.actions\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectBgColor = (state: RootState) => state.path.bgColor\r\n\r\nexport default pathSlice.reducer"]},"metadata":{},"sourceType":"module"}